# docker-compose.yml
# docker compose up -d
name: essosc-viewer

volumes:
  geoserver_data_dir:
  traefik_letsencrypt:

networks:
  backend: {}

services:
  traefik:
    image: traefik:v3
    command:
      - --providers.docker
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Let's Encrypt (HTTP-01)
      - --certificatesresolvers.le.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge=true
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
    ports:
      - 80:80
      - 443:443
    networks: [backend]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    labels:
      # redirect all http->https
      - traefik.enable=true
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

  geoserver:
    image: ${GEOSERVER_IMAGE}
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'wget -qO- http://localhost:8080/geoserver/web/ >/dev/null 2>&1 || exit 1']
      interval: 15s
      timeout: 5s
      retries: 20
    environment:
      - GEOSERVER_ADMIN_USER=${GEOSERVER_ADMIN_USER}
      - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_ADMIN_PASSWORD}
      - JAVA_OPTS=${GEOSERVER_JAVA_OPTS}
    volumes:
      - ./geoserver_data_dir:${GEOSERVER_DATA_DIR}
      - ./local_data:${GEOSERVER_LOCAL_DATA_DIR}:ro
    networks: [backend]
    labels:
      - traefik.enable=true
      - traefik.http.routers.geoserver.rule=Host(`resnetdata.ecoshard.org`) && PathPrefix(`/geoserver`)
      - traefik.http.routers.geoserver.entrypoints=websecure
      - traefik.http.routers.geoserver.tls=true
      - traefik.http.routers.geoserver.tls.certresolver=le
      - traefik.http.services.geoserver.loadbalancer.server.port=8080

  viewer:
    build:
      context: .
      dockerfile: Dockerfile.viewer
    restart: unless-stopped
    environment:
      - GEOSERVER_BASE_URL=/geoserver
      - LAYERS_YAML_PATH=/app/layers.yml
      - RSTATS_BASE_URL=/rstats
    volumes:
      - ./layers.yml:/app/layers.yml:ro
    networks: [backend]
    labels:
      - traefik.enable=true
      - traefik.http.routers.viewer.rule=Host(`resnetdata.ecoshard.org`) && PathPrefix(`/viewer`)
      - traefik.http.routers.viewer.entrypoints=websecure
      - traefik.http.routers.viewer.tls=true
      - traefik.http.routers.viewer.tls.certresolver=le
      - traefik.http.services.viewer.loadbalancer.server.port=5173
      - traefik.http.middlewares.viewer-stripprefix.stripprefix.prefixes=/viewer
      - traefik.http.routers.viewer.middlewares=viewer-stripprefix@docker

  geoserver-init:
    build:
      context: .
      dockerfile: Dockerfile.geoserver-init
      args:
        GEOSERVER_LOCAL_DATA_DIR: ${GEOSERVER_LOCAL_DATA_DIR}
    depends_on:
      geoserver:
        condition: service_healthy
    networks: [backend]
    restart: 'no'
    volumes:
      - ./geoserver_register.py:/app/geoserver_register.py:ro
      - ./layers.yml:/app/layers.yml:ro
      - ./.env:/app/.env:ro
      - ./local_data:${GEOSERVER_LOCAL_DATA_DIR}:ro
      - ./local_data/processed_rasters:${GEOSERVER_LOCAL_DATA_DIR}/processed_rasters
    command: ['/app/layers.yml']

  rstats:
    build:
      context: .
      dockerfile: Dockerfile.rstats
    restart: unless-stopped
    environment:
      - RASTERS_YAML_PATH=/app/layers.yml
      - WORKERS=2
    volumes:
      - ./layers.yml:/app/layers.yml:ro
      - ./local_data:${GEOSERVER_LOCAL_DATA_DIR}:ro
      - ./.env:/app/.env:ro
    networks: [backend]
    labels:
      - traefik.enable=true
      - traefik.http.routers.rstats.rule=Host(`resnetdata.ecoshard.org`) && PathPrefix(`/rstats`)
      - traefik.http.routers.rstats.entrypoints=websecure
      - traefik.http.routers.rstats.tls=true
      - traefik.http.routers.rstats.tls.certresolver=le
      - traefik.http.services.rstats.loadbalancer.server.port=8000
      - traefik.http.middlewares.rstats-stripprefix.stripprefix.prefixes=/rstats
      - traefik.http.routers.rstats.middlewares=rstats-stripprefix@docker
